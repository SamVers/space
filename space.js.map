{"version":3,"file":"space.js","sources":["../util/SI-units.js","container.js","collision.js","../util/linked-list.js","object.js","object-group.js","octree.js","studio.js","timers.js"],"sourcesContent":["// the units that are \r\nconst allSeries = [\r\n    {type:\"unknown\", units: [ {str:\"?\", exp:0}] },\r\n    {type:\"length\",  units: [ {str:\"km\", exp:3}, {str:\"m\", exp:0}, {str:\"cm\", exp:-2}, {str:\"mm\", exp:-3}, {str:\"µm\", exp:-6}, {str:\"nm\", exp:-9}, {str:\"pm\", exp:-12}] },\r\n    {type:\"mass\",    units: [ {str:\"Gt\", exp:12}, {str:\"Mt\",exp:9}, {str:\"kt\",exp:6}, {str:\"t\",exp:3}, {str:\"kg\",exp:0}, {str:\"g\",exp:-3}, {str:\"µg\",exp:-6}, {str:\"ng\",exp:-9}, {str:\"pg\",exp:-12},{str:\"Da\",exp:-27},]},\r\n    {type:\"speed\",   units: [ {str:\"km/s\", exp:3},{str:\"km/h\", exp:0}, {str:\"m/s\", exp:0}, {str:\"cm/s\", exp:-2}, {str:\"mm/s\", exp:-3}, {str:\"µm/s\", exp:-6}, {str:\"nm/s\", exp:-9}] },\r\n]\r\n\r\n// 1 atomic mass unit is defined as 1/12 of the mass of a single carbon-12 atom. 1 u has a value of 1.660538921(73) × 10−27 kg.\r\n// size of an atom ~ 100 pm\r\n\r\nexport function getSeries(unit) {\r\n\r\n    let i,j\r\n    for(i=1;i<allSeries.length;i++) {           \r\n        let units = allSeries[i].units\r\n        for (j=0;j<units.length;j++){\r\n            if (units[j].str == unit) return units\r\n        }\r\n    }\r\n\r\n    // not found - return the question mark\r\n    return allSeries[0].units\r\n}\r\n\r\n// conversion factor from one unit to the other\r\nexport function exponent(type, unitFrom, unitTo) {\r\n\r\n    // find the units\r\n    let series = allSeries.find( (s) => s.type === type)\r\n\r\n    // check \r\n    if (series === undefined) return null\r\n\r\n    // find the two units in the series\r\n    let F = series.units.find( (u) => u.str === unitFrom )\r\n    let T = series.units.find( (u) => u.str === unitTo )\r\n\r\n    // check\r\n    if (F === undefined || T === undefined) return null\r\n\r\n    // subtract the exponents\r\n    return (F.exp - T.exp)\r\n}\r\n\r\nexport function factor(type, unitFrom, unitTo) {\r\n    \r\n    let exp = exponent(type, unitFrom, unitTo)\r\n\r\n    if (exp == null) return null\r\n    else return 10**exp\r\n}\r\n\r\n","//import * as THREE from 'three/build/three.min.js'\r\nimport * as THREE from 'three'\r\nimport * as SI from '../../lib/util/SI-units.js'\r\n\r\n// The box container\r\nexport class cuboidContainerClass {\r\n\r\nconstructor(scene, spec) {\r\n\r\n    // spec = {vector: (x,y,z) and unit: \"m\"}\r\n\r\n    // size of the bounding box - everything in meter \r\n    let factor = SI.factor(\"length\", spec.unit, \"m\") \r\n    let s = {x: factor*spec.vector.x, y:factor*spec.vector.y, z:factor*spec.vector.z}\r\n\r\n    // positioned around 0\r\n    let p = {x:0, y:0, z:0}\r\n\r\n    // geometry, material, mesh\r\n    this.geometry = this.material = this.mesh = null\r\n\r\n    // make the bounding box\r\n    this.bBox = new THREE.Box3( new THREE.Vector3(p.x-s.x/2, p.y-s.y/2, p.z-s.z/2), \r\n                                new THREE.Vector3(p.x+s.x/2, p.y+s.y/2, p.z+s.z/2))\r\n\r\n    // the material settings\r\n    this.materialSettings = { color: \"#aabbdd\",wireframe: true,transparent: true,opacity: 0.5}\r\n\r\n    // the force exerted on the walls of the container \r\n    this.force = {  x1:0.0, x2:0.0,\r\n                    y1:0.0, y2:0.0,\r\n                    z1:0.0, z2:0.0 }\r\n\r\n    // the nr of collisions on each wall\r\n    this.collisions = { nX1:0, nX2:0,\r\n                        nY1:0, nY2:0,\r\n                        nZ1:0, nZ2:0}\r\n\r\n    // we only need the rest if we have a scene to draw into\r\n    if (!scene) return\r\n\r\n    // make the material\r\n    this.makeMaterial()\r\n\r\n    // make the mesh of the box\r\n    this.makeGeometry(s)\r\n\r\n    // make the mesh\r\n    this.addMesh(scene)\r\n}\r\n\r\nchangeSize(scene, spec) {\r\n\r\n    // size of the bounding box - everything in meter \r\n    let factor = SI.factor(\"length\", spec.unit, \"m\") \r\n    let s = {x: factor*spec.vector.x, y:factor*spec.vector.y, z:factor*spec.vector.z}\r\n\r\n    // positioned around 0\r\n    let p = {x:0, y:0, z:0}\r\n\r\n    // make the bounding box\r\n    this.bBox = new THREE.Box3( new THREE.Vector3(p.x-s.x/2, p.y-s.y/2, p.z-s.z/2), \r\n                                new THREE.Vector3(p.x+s.x/2, p.y+s.y/2, p.z+s.z/2))\r\n\r\n    // we only need the rest if we have a scene to draw into\r\n    if (!scene) return   \r\n\r\n    // make the mesh of the box\r\n    this.makeGeometry(s)\r\n\r\n    // make the mesh\r\n    this.addMesh(scene)\r\n}\r\n\r\nmakeGeometry(s) {\r\n\r\n    // we make some subdivisions on the cuboid\r\n    let min = s.x < s.y ? ( s.x < s.z ? s.x : s.z) : ( s.y < s.z ? s.y : s.z)\r\n\r\n    // calculate the nr of subdivisions and limit to 32\r\n    let [nx,ny,nz] = [4*Math.round(s.x/min), 4*Math.round(s.y/min), 4*Math.round(s.z/min)]\r\n\r\n    // max nr of divisions\r\n    const maxDiv = 16\r\n    nx = nx > maxDiv ? maxDiv : nx,  ny= ny > maxDiv ? maxDiv : ny,  nz = nz > maxDiv ? maxDiv : nz\r\n\r\n    // get rid of old geometry if any and create the new one\r\n    if (this.geometry) this.geometry.dispose()\r\n    this.geometry = new THREE.CubeGeometry(s.x,s.y,s.z, nx, ny, nz)\r\n}\r\n\r\nmakeMaterial() {\r\n    if (this.material) this.material.dispose()\r\n    this.material = new THREE.MeshLambertMaterial(this.materialSettings)\r\n}\r\n\r\naddMesh(scene) {\r\n    if (this.mesh) scene.remove(this.mesh)\r\n    this.mesh = new THREE.Mesh(this.geometry, this.material)\r\n    scene.add(this.mesh)\r\n}\r\n\r\nmagnitude() {\r\n    return this.bBox.max.clone().sub(this.bBox.min).length()\r\n}\r\n\r\n// we do not care about the collision time - reflection is simple to calculate\r\n// we set collision time at 100 - after sorting collisions with the container will be at the end\r\ncollisionCheck(object, interval, collisions) {\r\n\r\n    // notation\r\n    let p = object.pos, box = this.bBox, r = object.radius\r\n    \r\n    // check if the object is beyond the box - in the x, y or z direction\r\n    if ((p.x < box.min.x + r) || (p.x > box.max.x - r)||\r\n        (p.y < box.min.y + r) || (p.y > box.max.y - r)|| \r\n        (p.z < box.min.z + r) || (p.z > box.max.z - r)  ) {\r\n\r\n        // if it is push it on the collision-array \r\n        collisions.add(this, object, 100.0)\r\n    }\r\n}\r\n\r\n// Calculates the new position of the object after collision with the cuboid\r\n// Note that the position of the object is already the new position but without the collision\r\n// Here we simply calculate the reflected position and the reflected speed\r\ncollide( object, tCol, interval ) {\r\n\r\n    let p = object.pos,  v = object.speed,  r = object.radius, m= object.mass\r\n    let box = this.bBox\r\n    \r\n    if (p.x < box.min.x + r) {\r\n        p.x = -p.x + 2*(box.min.x + r)\r\n        v.x = -v.x\r\n        this.force.x1 += 2*m*v.x\r\n        this.collisions.nX1++\r\n    }\r\n    else if ( p.x > box.max.x - r ) {\r\n        p.x = -p.x + 2*(box.max.x - r)\r\n        v.x = -v.x\r\n        this.force.x2 -= 2*m*v.x\r\n        this.collisions.nX2++\r\n    }\r\n    \r\n    if (p.y < box.min.y + r) {\r\n        p.y = -p.y + 2*(box.min.y + r)\r\n        v.y = -v.y\r\n        this.force.y1 += 2*m*v.y\r\n        this.collisions.nY1++\r\n    }\r\n    else if (p.y > box.max.y - r) {\r\n        p.y = -p.y + 2*(box.max.y - r)\r\n        v.y = -v.y\r\n        this.force.y2 -= 2*m*v.y\r\n        this.collisions.nY2++\r\n    }\r\n\r\n    if ( p.z < box.min.z + r) {\r\n        p.z = -p.z + 2*(box.min.z + r)\r\n        v.z = -v.z\r\n        this.force.z1 += 2*m*v.z\r\n        this.collisions.nZ1++\r\n    }\r\n    else if ( p.z > box.max.z - r ) {\r\n        p.z = -p.z + 2*(box.max.z - r)\r\n        v.z = -v.z\r\n        this.force.z2 -= 2*m*v.z\r\n        this.collisions.nZ2++\r\n    }\r\n}\r\n\r\ngetForceAndArea() {\r\n\r\n    // notation\r\n    let f = this.force\r\n    let s = this.bBox.max.clone().sub(this.bBox.min)\r\n\r\n    // calculate\r\n    let force = f.x1 + f.x2 + f.y1 + f.y2 + f.z1 + f.z2\r\n    let area = 2*(s.x*s.y + s.x*s.z + s.y*s.z)\r\n    \r\n    // reset the force\r\n    f.x1 = f.x2 = f.y1 = f.y2 = f.z1 = f.z2 = 0.0\r\n\r\n    // done\r\n    return [force, area]\r\n}\r\n\r\ngetCollisions() {\r\n\r\n    let c = this.collisions\r\n    let count = c.nX1 + c.nX2 + c.nY1 + c.nY2 + c.nZ1 + c.nZ2\r\n    c.nX1 = c.nX2 = c.nY1 = c.nY2 = c.nZ1 = c.nZ2 = 0\r\n    return count\r\n}\r\n\r\n} // end of container class","// this list contains all the objects that will collide and the time of collision\r\n// it also keeps track of the statistics of the collisions\r\nexport class collisionClass {\r\n\r\n    constructor() {\r\n\r\n        this.list = []\r\n        this.count = 0\r\n        this.period = 0.0\r\n    }\r\n\r\n    resetCount() {\r\n        this.count = 0\r\n        this.period = 0.0\r\n    }\r\n\r\n    resetList() {\r\n        this.list = []\r\n    }\r\n\r\n    add( a, b, t) {\r\n\r\n        this.list.push({a,b,t})\r\n    }\r\n\r\n    collide(interval) { \r\n\r\n        let list = this.list\r\n        \r\n        // check\r\n        if (list.length < 1) return\r\n\r\n        // sort the list \r\n        list.sort( (r1, r2) => r1.t - r2.t )\r\n\r\n        // do all collisions\r\n        let len = list.length\r\n        let col = null\r\n        for (let i=0; i < len ; i++) {\r\n\r\n            // get the collision record\r\n            col = list[i]\r\n\r\n            // parameters are the other object, the collision time (relative to the start if the interval) and the interval duration\r\n            col.a.collide(col.b, col.t, interval)\r\n        }\r\n\r\n        this.period += interval\r\n        this.count += len\r\n    }\r\n\r\n    get() {\r\n        return {count: this.count, period: this.period}\r\n    }\r\n}","// a doubly linked list of elements\r\nexport class singleLinkedList {\r\n\r\n    constructor() {\r\n\r\n        this.n = 0\r\n        this.first = null\r\n        this.last = null\r\n    }\r\n\r\n    reset() {\r\n        this.n = 0\r\n        this.first = null\r\n        this.last = null        \r\n    }\r\n\r\n    length() { return this.n }\r\n\r\n    // attach detach at the end of the list\r\n    attach(p) {\r\n        p.next = null\r\n        if (this.last == null)  {\r\n            this.first = this.last = p\r\n        }\r\n        else {\r\n            this.last.next = p\r\n            this.last = p \r\n        }\r\n        this.n++\r\n    }\r\n\r\n    detach() {\r\n        if (this.last==null) return null\r\n        let p = this.last\r\n        if (this.last==this.first)\r\n            this.first = this.last = null\r\n        else {\r\n            this.last = this.first\r\n            while (this.last.next) this.last = this.last.next\r\n        }\r\n        this.n--\r\n        return p\r\n    }\r\n\r\n    // push and pop at the front of the list\r\n    push(p) {\r\n        p.next = this.first\r\n        if (this.first == null) {\r\n            this.first = this.last = p\r\n        }\r\n        else {\r\n            this.first = p\r\n        }\r\n        this.n++\r\n    }\r\n\r\n    pop() {\r\n        if (this.first == null) return null\r\n        let p = this.first\r\n        this.first = p.next\r\n        p.next = null\r\n        if (this.first == null) this.last = null\r\n        this.n--\r\n        return p\r\n    }\r\n}\r\n\r\nexport class doubleLinkedList {\r\n\r\n    constructor() {\r\n\r\n        this.n = 0\r\n        this.first = null\r\n        this.last = null\r\n    }\r\n\r\n    reset() {\r\n        this.n = 0\r\n        this.first = null\r\n        this.last = null        \r\n    }\r\n\r\n    length() { return this.n }\r\n\r\n    // attach detach at the end of the list\r\n    attach(p) {\r\n        p.next = null\r\n        p.previous = this.last\r\n        if (this.last == null)  {\r\n            this.first = this.last = p\r\n        }\r\n        else {\r\n            this.last.next = p\r\n            this.last = p \r\n        }\r\n        this.n++\r\n    }\r\n\r\n    detach() {\r\n        if (this.last==null) return null\r\n        let p = this.last\r\n        this.last = p.previous\r\n        p.previous = null\r\n        if (this.last == null)\r\n            this.first = null\r\n        else \r\n            this.last.next = null\r\n        this.n--\r\n        return p\r\n    }\r\n\r\n    // push and pop at the front of the list\r\n    push(p) {\r\n        p.previous = null\r\n        p.next = this.first\r\n        if (this.first == null) {\r\n            this.first = this.last = p\r\n        }\r\n        else {\r\n            this.first.previous = p\r\n            this.first = p\r\n        }\r\n        this.n++\r\n    }\r\n\r\n    pop() {\r\n        if (this.first == null) return null\r\n        let p = this.first\r\n        this.first = p.next\r\n        p.next = null\r\n        if (this.first == null) \r\n            this.last = null\r\n        else\r\n            this.first.previous = null\r\n        this.n--\r\n        return p\r\n    }\r\n\r\n    // extract and insert somewhere in the list\r\n    extract(p) {\r\n\r\n        if (p==null) return\r\n  \r\n        if (p.previous) {\r\n            p.previous.next = p.next\r\n            if (p.next) \r\n                p.next.previous = p.previous\r\n            else \r\n                this.last = p.previous\r\n            p.next = p.previous = null\r\n        }\r\n        else {\r\n            this.first = p.next\r\n        }\r\n        this.n--\r\n    }\r\n\r\n    insert(p, here) {\r\n\r\n    }\r\n}","// import * as THREE from 'three/build/three.min.js'\r\nimport * as THREE from 'three'\r\n\r\n// colors used for bounding boxes\r\nconst boxFreeClr = new THREE.Color(\"#00FF00\")\r\nconst boxHitClr =  new THREE.Color(\"#FF0000\")\r\n\r\nexport class objectClass {\r\n\r\n    constructor(mass, radius) {\r\n\r\n        this.pos = new THREE.Vector3()\r\n        this.speed = new THREE.Vector3()\r\n        this.radius = radius\r\n        this.mass = mass\r\n\r\n        // the bounding box when moving from one position to another\r\n        this.bBox = new THREE.Box3\r\n\r\n        // for debugging we sometimes need to see the bounding boxes\r\n        this.boxHelper = null\r\n\r\n        // objects can be added to a linked list (eg in the collisionlist)\r\n        this.next = null\r\n    }\r\n\r\n    // calculate the size of the bounding box based on the new position q and the size of tha ball\r\n    setBBox(q) {\r\n\r\n        // notation\r\n        let p = this.pos, r = this.radius, min = this.bBox.min, max = this.bBox.max\r\n\r\n        // we subtract/add r to make sure the ball lies completely in the box\r\n        min.x = p.x < q.x ? p.x-r : q.x-r\r\n        min.y = p.y < q.y ? p.y-r : q.y-r\r\n        min.z = p.z < q.z ? p.z-r : q.z-r\r\n\r\n        max.x = p.x > q.x ? p.x+r : q.x+r\r\n        max.y = p.y > q.y ? p.y+r : q.y+r\r\n        max.z = p.z > q.z ? p.z+r : q.z+r\r\n\r\n        // a box that has collided changes gradually to normal\r\n        if (this.boxHelper) this.boxHelper.material.color.lerp(boxFreeClr,0.1)\r\n    }\r\n\r\n    newPosition(t) {\r\n\r\n        // calculate the new position\r\n        let q = this.pos.clone().addScaledVector(this.speed,t)\r\n\r\n        // adjust the bounding box\r\n        this.setBBox(q)\r\n\r\n        // copy the new position\r\n        this.pos.copy(q)\r\n    }\r\n\r\n    // a function to test for intersection of trajectories\r\n    intersects( other, interval ) {\r\n\r\n        if (this.bBox.intersectsBox(other.bBox)) {\r\n\r\n            // we have a candidate - calculate relative position and speed\r\n            // p = p2-p1, v= v2-v1 - note that p is already the new position t sec ago\r\n            let p = other.pos.clone().sub(this.pos)\r\n            let v = other.speed.clone().sub(this.speed)\r\n\r\n            // calculate a,b and c of the quadratic distance equation\r\n            let a = v.lengthSq()\r\n            let b = 2*p.dot(v)\r\n            let c = p.lengthSq() - (other.radius+this.radius)**2\r\n\r\n            // the determinant\r\n            let det = b*b - 4*a*c\r\n            \r\n            // if the determinant is positive there are intersections\r\n            if ( det > 0) {\r\n\r\n                // show that the objects will collide\r\n                if (this.boxHelper) this.boxHelper.material.color.copy(boxHitClr)\r\n                if (other.boxHelper) other.boxHelper.material.color.copy(boxHitClr)\r\n\r\n                // calculate the roots - nota that t1 is the smallest root\r\n                let sqrt = Math.sqrt(det)\r\n                let t1 = (-b - sqrt)/(2*a)\r\n\r\n                // there is a second 'collision' at t2 when the balls intersect when moving apart\r\n                // t2 = (-b + sqrt)/(2*a)\r\n                // t2 = -tCol - b/a\r\n                // t2 > 0 becomes then t1 < -b/a\r\n                // so if we have missed the first intersection (at t1) but t2 is still in the future, we still consider t1\r\n\r\n                // the collision should have happened in the interval except when the second collision is still in the future\r\n                if ( ( t1 < 0 ) && ((t1 > -interval) || (t1 < -b/a)) ) return t1\r\n                else  return Infinity\r\n            }\r\n            else return Infinity\r\n        }\r\n        return Infinity\r\n    }\r\n\r\n    collide( other, tCol, interval ) {\r\n\r\n        // bring the two objects back to the moment of the collision - tCol is always negative !\r\n        this.pos.addScaledVector(this.speed, tCol)\r\n        other.pos.addScaledVector(other.speed, tCol)\r\n\r\n        // formula to be found in wikipedia https://en.wikipedia.org/wiki/Elastic_collision#Two-dimensional\r\n        let p = this.pos.clone().sub(other.pos)\r\n        let v = this.speed.clone().sub(other.speed)\r\n\r\n        // the factors for the speed calculation\r\n        let f1 =  ( 2 * other.mass / (this.mass + other.mass) ) * ( v.dot(p) / p.lengthSq() )\r\n        let f2 = this.mass/other.mass\r\n\r\n        // calculate the new speeds - keep the order !\r\n        this.speed.sub( p.multiplyScalar(f1) )\r\n        other.speed.add( p.multiplyScalar(f2) )\r\n\r\n        // the two objects have still tCol seconds to travel with the new speed (-tCol is positive !)\r\n        this.pos.addScaledVector( this.speed, -tCol )\r\n        other.pos.addScaledVector( other.speed, -tCol )      \r\n    }\r\n}\r\n\r\n","// import * as THREE from 'three/build/three.min.js'\r\nimport * as THREE from 'three'\r\nimport * as SI  from '../util/util.js'\r\nimport {objectClass} from './object.js'\r\n\r\n// colors used for bounding boxes\r\nconst boxFreeClr = new THREE.Color(\"#00FF00\")\r\nconst boxHitClr =  new THREE.Color(\"#FF0000\")\r\n\r\nconst cmTom = 0.01\r\n\r\n\r\n// This function generates random numbers along a Normal or Log-normal distribution \r\n// using the Marsaglia polar method. the mean is 0 and the deviation is 1\r\n// the function generates two values at each invocation - that is why we have the spare\r\nlet spareRandom = null\r\nfunction normalRandom() {\r\n\r\n    let val, u, v, s, mul;\r\n\r\n    if(spareRandom !== null) {\r\n        val = spareRandom;\r\n        spareRandom = null;\r\n    }\r\n    else {\r\n        do {\r\n            u = Math.random()*2-1;\r\n            v = Math.random()*2-1;\r\n            s = u*u+v*v;\r\n        } while(s === 0 || s >= 1);\r\n        mul = Math.sqrt(-2 * Math.log(s) / s);\r\n        val = u * mul;\r\n        spareRandom = v * mul;\r\n    }\r\n    return val;\r\n}\r\n\r\nexport class objectGroupClass {\r\n\r\n    constructor(name, color) {\r\n\r\n        // save the name\r\n        this.name = String(name)\r\n\r\n        // we also save the color\r\n        this.color = color\r\n\r\n        // the objects positions etc\r\n        this.objects = []\r\n\r\n        // the helper group\r\n        this.boxHelperGroup = null\r\n\r\n        // we keep the mesh, geometry and material\r\n        this.mesh = this.geometry = this.material = null\r\n\r\n        // the material\r\n        this.material = new THREE.MeshLambertMaterial({color: new THREE.Color(this.color)})\r\n        // convert to meter\r\n        // let radius = init.objectRadius ?\r\n        //              +init.objectRadius.value * SI.factor(\"length\",init.objectRadius.unit, \"m\")\r\n        //              : 0.0\r\n\r\n        // object geometry\r\n        // this.geometry = new THREE.SphereGeometry(radius , 12, 12)\r\n    }\r\n\r\n    newObjectCount(scene, count, mass, radius) {\r\n\r\n        // remove the box helpers if any\r\n        if (this.boxHelperGroup != null) {\r\n\r\n            scene.remove( this.boxHelperGroup )\r\n            this.boxHelperGroup = null\r\n        }\r\n\r\n        // get a new array for the objects\r\n        this._setObjectArrays(count, mass, radius)\r\n\r\n        // if we still have a mesh - release it\r\n        if (this.mesh) {\r\n            scene.remove(this.mesh)\r\n            this.mesh = null\r\n        }\r\n    }\r\n\r\n    _setObjectArrays(count, mass, radius) {\r\n\r\n        // if the array is too big -\r\n        if (this.objects.length >= count) {\r\n\r\n            //...trim to count\r\n            this.objects.length = count\r\n        }\r\n        else {\r\n            // if too small - free\r\n            this.objects.length = 0\r\n        \r\n            // allocate a new array\r\n            this.objects = new Array(count)\r\n\r\n            // initialize\r\n            for (let i=0; i<count; i++) this.objects[i] = new objectClass(mass, radius)\r\n        }\r\n    }\r\n\r\n    checkMassAndRadius(container, objectCount, objectMass, objectRadius) {\r\n\r\n        // the number of objects\r\n        let count = +objectCount.current\r\n\r\n\t\t// convert the mass of the object to g\r\n\t\tlet mass = +objectMass.value * SI.factor(\"mass\",objectMass.unit,\"g\")\r\n\r\n\t\t// convert the radius to meter\r\n        let radius = +objectRadius.value * SI.factor(\"length\",objectRadius.unit, \"m\")\r\n        \r\n        return [count, mass, radius]\r\n    }\r\n\r\n    // set the balls in the cube\r\n    initPosition(container, ballBox, location) {\r\n\r\n        // check\r\n        if (this.objects.length < 1) return\r\n\r\n        // the box where the balls have to fit\r\n        let cuboid = ballBox.vector\r\n\r\n        // the displacement of the box\r\n        let slide = (container.bBox.max.x - container.bBox.min.x - cuboid.x) * location.current/location.max\r\n\r\n        // the center of the box is\r\n        let center = new THREE.Vector3()\r\n        center.x = container.bBox.min.x + cuboid.x/2 + slide\r\n        center.y = (container.bBox.max.y + container.bBox.min.y)/2\r\n        center.z = (container.bBox.max.z + container.bBox.min.z)/2\r\n\r\n        this.randomInCuboid(cuboid, center)\r\n    }\r\n\r\n    // initialise the bounding boxes of the objects\r\n    initBBox() {\r\n        let object = null\r\n        for (let i=0; i< this.objects.length; i++) {\r\n            object = this.objects[i]\r\n            object.bBox.min.copy(object.pos).subScalar(object.radius)\r\n            object.bBox.max.copy(object.pos).addScalar(object.radius)\r\n        }\r\n    }\r\n\r\n    randomInCuboid(cuboid, center){\r\n\r\n        let object =null\r\n        let r = this.objects[0].radius\r\n\r\n        let x = cuboid.x - 2*r, dx = - cuboid.x/2 + center.x\r\n        let y = cuboid.y - 2*r, dy = - cuboid.y/2 + center.y\r\n        let z = cuboid.z - 2*r, dz = - cuboid.z/2 + center.z\r\n\r\n        // everything is centered around 0 - so we shift half\r\n        for (let i=0; i< this.objects.length; i++) {\r\n\r\n            object = this.objects[i]\r\n            object.pos.set( x * Math.random() + dx, \r\n                            y * Math.random() + dy, \r\n                            z * Math.random() + dz)\r\n        }\r\n    }\r\n\r\n    slideObjects(container, ballBox, location) {\r\n\r\n        // check\r\n        if (this.objects.length < 1) return\r\n\r\n        let pos = null\r\n        let r = this.objects[0].radius\r\n        let max = container.bBox.max, min = container.bBox.min\r\n\r\n        // the displacement of the box\r\n        let slide = (max.x - min.x - ballBox.vector.x) * location.delta/location.max\r\n        for (let i=0; i< this.objects.length; i++) {\r\n            pos = this.objects[i].pos\r\n            pos.x += slide\r\n            if (pos.x < min.x + r ) pos.x = min.x + r\r\n            if (pos.x > max.x - r ) pos.x = max.x - r\r\n        }\r\n    }\r\n\r\n    orderedInCuboid(cuboid){\r\n\r\n        // the nr of vectors we need\r\n        let nVectors = this.objects.length\r\n        let r = this.objects[0].radius\r\n\r\n        // the raster we will use - note that nx*ny*nz > nVectors !\r\n        let nx = Math.ceil( (nVectors*(cuboid.x/cuboid.y)*(cuboid.x/cuboid.z))**(1/3))\r\n        let ny = Math.ceil( (nVectors*(cuboid.y/cuboid.x)*(cuboid.y/cuboid.z))**(1/3))\r\n        let nz = Math.ceil( (nVectors*(cuboid.z/cuboid.x)*(cuboid.z/cuboid.y))**(1/3))\r\n    \r\n        // the spacing between objects\r\n        // let dx=3*r,dy=3*r,dz=3*r\r\n        // if (dx*nx > cuboid.x) dx = cuboid.x/nx\r\n        // if (dy*ny > cuboid.y) dy = cuboid.y/ny\r\n        // if (dz*nz > cuboid.z) dz = cuboid.z/nz\r\n\r\n        let dx = cuboid.x/nx\r\n        let dy = cuboid.y/ny\r\n        let dz = cuboid.z/nz\r\n    \r\n        // the indices\r\n        let ix = 0, iy = 0, iz = 0, count = 0\r\n\r\n        // we center around 0\r\n        let offset = {x: -dx*(nx-1)/2, y: -dy*(ny-1)/2, z: -dz*(nz-1)/2}\r\n \r\n        // caculate the positions of all objects\r\n        for (iz=0; iz<nz; iz++) {\r\n            for (iy=0; iy<ny; iy++) {\r\n                for (ix=0; ix<nx; ix++) {              \r\n                    this.objects[count].pos.set(ix*dx + offset.x, \r\n                                                iy*dy + offset.y, \r\n                                                iz*dz + offset.z)\r\n                    if (++count == nVectors) return\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    randomInSphere(radius) {\r\n\r\n        let phi=0.0, theta=0.0, R=0.0\r\n        for (let i=0; i< this.objects.length; i++) {\r\n            phi   = Math.random()*Math.PI*2\r\n            theta = Math.random()*Math.PI\r\n            R     = Math.random()*radius\r\n            this.objects[i].pos.set(R*Math.sin(theta)*Math.cos(phi), \r\n                                    R*Math.sin(theta)*Math.sin(phi),\r\n                                    R*Math.cos(theta))\r\n        }\r\n    }\r\n\r\n    orderedInSphere(radius) {\r\n\r\n        let R=0.0\r\n        let dphi=2*Math.PI\r\n        let dtheta=Math.PI\r\n        let r = 2*this.objects[0].radius\r\n        let count = 0\r\n\r\n        for (let shell=1; shell < 10; shell++) {\r\n\r\n            R = shell * r\r\n            dphi = 2*Math.PI/(shell*6)\r\n            dtheta = Math.PI/(shell*6)\r\n            for (let i = 0; i <= shell*6; i++) {\r\n                for (let j=0; j<= shell*6;j++) {\r\n\r\n                    this.objects[count].pos.set(\r\n                        R*Math.sin(dtheta*j)*Math.cos(dphi*i), \r\n                        R*Math.sin(dtheta*j)*Math.sin(dphi*i),\r\n                        R*Math.cos(dtheta*j))\r\n\r\n                    if (++count == this.objects.length) return\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    placeObjectsInScene(scene) {\r\n\r\n        // the matrix to position the objects\r\n        let matrix = new THREE.Matrix4()\r\n\r\n        // check if we have to place a new mesh\r\n        if (this.mesh == null) {\r\n\r\n            // create an instanced mesh with the geometry - it will be instanced nObjects time\r\n            this.mesh = new THREE.InstancedMesh(this.geometry, this.material, this.objects.length)\r\n\r\n            // add to the scene\r\n            scene.add(this.mesh)\r\n        }\r\n\r\n        // set the update bit\r\n\t\tthis.mesh.instanceMatrix.needsUpdate = true\r\n\r\n        // place every instance...\r\n        for (let i=0; i<this.objects.length; i++) {\r\n\r\n            // make the matrix to position the object\r\n            matrix.setPosition(this.objects[i].pos)\r\n\r\n            // position the object\r\n            this.mesh.setMatrixAt(i,matrix)\r\n        }\r\n    }\r\n\r\n    // {   text:\"fixed value\",         value:{type:\"fixed\",fixedSpeed}},\r\n    // {   text:\"normal distributed\",  value:{type:\"rnd-normal\", mu, sigma}},\r\n    // {   text:\"uniform distributed\", value:{type:\"rnd-uniform\",a, b}},\r\n\r\n    initSpeed(direction, amplitude) {\r\n\r\n        let object = null\r\n        let A=0, fixedSpeed=0, sigma=0, mu=0, a=0, b=0\r\n        let phi = 0.0, theta = 0.0\r\n\r\n        // to speed up the calculations\r\n        switch(amplitude.type) {\r\n\r\n            case \"fixed\":  \r\n                fixedSpeed = +amplitude.fixedSpeed.value\r\n                break\r\n\r\n            case \"rnd-normal\": \r\n                sigma = +amplitude.sigma.value \r\n                mu = +amplitude.mu.value\r\n                break\r\n\r\n            case \"rnd-uniform\": \r\n                a = +amplitude.a.value\r\n                b = +amplitude.b.value\r\n                break\r\n        }\r\n        \r\n        // calculate for each object\r\n        for(let i=0;i<this.objects.length;i++) {\r\n\r\n            // notation\r\n            object = this.objects[i]\r\n\r\n            // first get the amplitue\r\n            switch(amplitude.type) {\r\n                case \"fixed\": A = fixedSpeed\r\n                    break\r\n\r\n                case \"rnd-normal\": A = normalRandom()*sigma + mu\r\n                    break\r\n\r\n                case \"rnd-uniform\": A = (Math.random() * (b-a)) + a\r\n                    break\r\n            }\r\n\r\n            // then the vector\r\n            switch(direction.type) {\r\n        \r\n                case \"random\":\r\n                    // get the random vectors using polar coordinates\r\n                    phi = Math.random()*Math.PI*2\r\n                    theta = Math.random()*Math.PI\r\n                    object.speed.set(   A*Math.sin(theta)*Math.cos(phi), \r\n                                        A*Math.sin(theta)*Math.sin(phi),\r\n                                        A*Math.cos(theta))\r\n                    break\r\n        \r\n                case \"radial\":\r\n                    object.speed.copy(object.pos).sub(direction.center).setLength(A)\r\n                    break\r\n        \r\n                case \"parallel\":\r\n                    object.speed.copy(direction.parallel).setLength(A)\r\n                    break\r\n        \r\n                default: \r\n                    console.log(\"[UNKNOWN] unknown speed vector type in function speedVectors\", direction.type)\r\n                    return\r\n            }\r\n        }\r\n        //console.log(\"objects\",this.objects )\r\n    }\r\n\r\n    // put the helpers in a THREE.Group !\r\n    showAABB(scene) {\r\n\r\n        let object = null\r\n\r\n        // check if we have to create the box helper group\r\n        if (this.boxHelperGroup == null ) {\r\n\r\n            this.boxHelperGroup = new THREE.Group()\r\n\r\n            for (let i=0; i < this.objects.length; i++) {\r\n\r\n                // notation\r\n                object = this.objects[i]\r\n\r\n                // create a boxhelper object\r\n                object.boxHelper = new THREE.Box3Helper( object.bBox, boxFreeClr )\r\n\r\n                // add the helpers to the box helper group\r\n                this.boxHelperGroup.add(object.boxHelper)\r\n            }\r\n        }\r\n\r\n        // add the helper group to the scene\r\n        scene.add(this.boxHelperGroup)\r\n    }\r\n\r\n    hideAABB(scene) {\r\n\r\n        if (this.boxHelperGroup) scene.remove( this.boxHelperGroup )\r\n    }\r\n\r\n    changeMass(value, unit) {\r\n\r\n        // convert the mass of the object to g\r\n        let mass = (+value) * SI.factor(\"mass\",unit,\"g\")\r\n\r\n        // change all masses\r\n        for (let i=0; i < this.objects.length; i++) \r\n            this.objects[i].mass = mass\r\n    }\r\n\r\n    changeRadius(value, unit) {\r\n\r\n        // recalculate the radius\r\n        let radius = (+value) * SI.factor(\"length\",unit,\"m\")\r\n        \r\n        // we have to change the geometry\r\n        if (this.geometry) this.geometry.dispose()\r\n\r\n        // get a new geometry\r\n        this.geometry = new THREE.SphereGeometry(radius , 12, 12) \r\n        \r\n        // and put it in the mesh\r\n        if (this.mesh) this.mesh.geometry = this.geometry\r\n\r\n        // change all objects\r\n        for (let i=0; i < this.objects.length; i++) \r\n            this.objects[i].radius = radius\r\n    }\r\n}","// import * as THREE from 'three/build/three.min.js'\r\nimport * as THREE from 'three'\r\nimport {singleLinkedList} from '../util/util.js'\r\n\r\nexport class octreeClass {\r\n\r\n    // creates the octant-tree recursively\r\n    constructor(p1, p2, level) {\r\n\r\n        // the octant is a box defined by two diagonal points\r\n        this.space = new THREE.Box3(p1, p2)\r\n\r\n        // octant is an array that will contain the sub-octants if any\r\n        this.octant = null //[null, null, null, null, null, null, null, null]\r\n\r\n        // the linked list that will contain all objects in this octant that do not fit in a sub-octant\r\n        this.objectList = new singleLinkedList\r\n\r\n        // if not at the lowest level (note 1 = 8, 2 = 64, 3 = 512 suboctants)\r\n        if (level > 0) {\r\n\r\n            // it contains 8 new octants\r\n            this.octant = [null, null, null, null, null, null, null, null]\r\n\r\n            // dp is a vector with the size of the octant at this level\r\n            let dp = new THREE.Vector3( (p2.x-p1.x)/2,(p2.y-p1.y)/2,(p2.z-p1.z)/2 ) \r\n            \r\n            // get a new vector\r\n            let p = new THREE.Vector3()\r\n\r\n            // make a total of eight new octants\r\n            let n = 0\r\n            for (let i=0; i<2; i++)\r\n                for (let j=0; j<2; j++)\r\n                    for (let k=0; k<2; k++) {\r\n\r\n                        // p defines one point of the octant..\r\n                        p.set( p1.x + i*dp.x, p1.y + j*dp.y , p1.z + k*dp.z)\r\n\r\n                        // ..and p+dp is the diagonally opposed point \r\n                        this.octant[n++] = new octreeClass(p, p.clone().add( dp ), level-1)\r\n                    }\r\n        }\r\n    }\r\n\r\n    // when the size of the container changes, the sizes of the octants have to be adapted as well\r\n    sizeChange(p1,p2) {\r\n\r\n        // change the size of the box\r\n        this.space.min = {...p1}\r\n        this.space.max = {...p2}\r\n\r\n        // if there are there still sub-octants..\r\n        if (this.octant) {\r\n\r\n            // dp is a vector with the size of the octant at this level\r\n            let dp = new THREE.Vector3( (p2.x-p1.x)/2,(p2.y-p1.y)/2,(p2.z-p1.z)/2 ) \r\n            \r\n            // a copy of p1\r\n            let p = new THREE.Vector3()\r\n\r\n            // adjust the size for for all octants\r\n            let n = 0\r\n            for (let i=0; i<2; i++)\r\n                for (let j=0; j<2; j++)\r\n                    for (let k=0; k<2; k++) {\r\n\r\n                        // p defines one point of the octant..\r\n                        p.set( p1.x + i*dp.x, p1.y + j*dp.y , p1.z + k*dp.z)\r\n\r\n                        // ..and p+dp is the diagonally opposed point \r\n                        this.octant[n++].sizeChange(p, p.clone().add( dp ))\r\n                    }\r\n        }\r\n    }\r\n\r\n    // all the object lists are reset\r\n    reset() {\r\n        // reset the object list\r\n        this.objectList.reset()\r\n\r\n        // check the sub-octants\r\n        if (this.octant) \r\n            for (let i=0; i < this.octant.length; i++) \r\n                if ( this.octant[i]) this.octant[i].reset()\r\n    }\r\n\r\n    // object is checked against the other objects already in the octree\r\n    // secTime is the duration of the interval in seconds \r\n    // collisions is an array that will contain all collision events in the interval\r\n    collisionCheck( object, secTime, collisions) {\r\n\r\n        // take the first object on the objects in this octant\r\n        let other = this.objectList.first\r\n        let when = 0.0\r\n\r\n        // check against collisions with objects stored at this level\r\n        while (other != null ) {\r\n\r\n            // calculate if the objects intersect and if so at what time in the interval - inifinity means no collision\r\n            if ( ( when = object.intersects(other, secTime)) != Infinity ) collisions.add(object,other,when)\r\n            \r\n            // take the next object\r\n            other = other.next\r\n        }\r\n\r\n        // check the sub-octants\r\n        if (this.octant) {\r\n\r\n            // check for each octant..\r\n            for (let i=0; i<this.octant.length; i++) {\r\n\r\n                // ..if the object bbox has an intersection with the octant space \r\n                if (object.bBox.intersectsBox(this.octant[i].space)) \r\n\r\n                    // ..then check for collisions in the octant - 'true' is returned if the object fits completely in a (sub) octant\r\n                    if ( this.octant[i].collisionCheck( object, secTime, collisions ) ) return true\r\n            }\r\n        }\r\n        // The object did not fit in the sub-octants - check if the object fits completely in this octant \r\n        if ( ! this.space.containsBox( object.bBox )) return false\r\n        \r\n        // ...it fits - put it on the object list for this octant\r\n        this.objectList.push(object)\r\n\r\n        // we're done\r\n        return true            \r\n    }\r\n\r\n    // count the nr of objects in the octree - just for debugging\r\n    count() {\r\n        let n = this.objectList.length()\r\n\r\n        if (this.octant) \r\n            for (let i=0; i<this.octant.length; i++)  \r\n                n += this.octant[i].count()\r\n        return n\r\n    }\r\n\r\n    // count the total nr of sub-octants - just for debugging\r\n    size() {\r\n        let n = 1\r\n\r\n        if (this.octant) {\r\n            for (let i=0; i<this.octant.length; i++)  \r\n                n += this.octant[i].size()\r\n        }\r\n        return n\r\n    }\r\n}// end of octree class\r\n\r\n","// import * as THREE from 'three/build/three.min.js'\r\nimport * as THREE from 'three'\r\nimport OrbitControls from 'orbit-controls-es6'\r\n//import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js'\r\n\r\nexport class studioClass {\r\n\r\nconstructor(canvas) {\r\n\r\n\t// the width and height of the canvas\r\n\tlet W = canvas.clientWidth\r\n\tlet H = canvas.clientHeight\r\n\r\n\tlet nearPlane=1, farPlane=10000\r\n\r\n\t// the camera\r\n\tthis.camera = new THREE.PerspectiveCamera(45,W / H, nearPlane, farPlane)\r\n\tthis.camera.position.set(1,1,1)\r\n\tthis.camera.lookAt(0,0,0)\r\n\r\n\t//the scene\r\n\tthis.scene = new THREE.Scene();\r\n\r\n\t// we will create an ambient and a point light\r\n\tthis.lights = {ambient:null, point:null}\r\n\r\n\t// add an ambient light\r\n\tthis.lights.ambient = new THREE.AmbientLight(0xffffff, 0.2)\r\n\tthis.scene.add(this.lights.ambient)\r\n\r\n\t// add a point light\r\n\tthis.lights.point = new THREE.PointLight(0xffffff, 0.9, 0, 2);\r\n\tthis.lights.point.position.set(0,0,0)\r\n\tthis.scene.add(this.lights.point)\r\n\t\r\n\t// set up the renderer\r\n\tthis.renderer = new THREE.WebGLRenderer({canvas: canvas, antialias: true})\r\n\tthis.renderer.setClearColor(0x000000)\r\n\tthis.renderer.setPixelRatio(window.devicePixelRatio);\r\n\tthis.renderer.setSize(W, H)\r\n\t\r\n\t// set up the orbit controls\r\n\t// NOTE BAD REACTION FROM ORBITCONTROLS WHEN HEIGHT +  VH\r\n\tthis.orbitControls = new OrbitControls( this.camera, canvas )\r\n\tthis.orbitControls.minDistance = nearPlane\r\n\tthis.orbitControls.maxDistance = farPlane\r\n\tthis.orbitControls.maxPolarAngle = Math.PI;\r\n\r\n    // add an axes helper to the scene\r\n\tthis.scene.add( new THREE.AxesHelper( 1 ) )\r\n}\r\n\r\nadjustToScene(d) {\r\n\tif (this.camera) {\r\n\t\tthis.camera.position.set(d/2,d/2,d)\r\n\t\tthis.camera.lookAt(0,0,0)\r\n\t}\r\n\tif (this.lights.point) this.lights.point.position.set( 2*d, 2*d, 2*d)\r\n}\r\n\r\nrender() {\r\n\r\n\t// just render the scene\r\n\tthis.renderer.render(this.scene, this.camera);\r\n}\r\n\r\n}//end of studio class","export class _3DTimerClass {\r\n\r\n\t//  fTime is the start of the frame\r\n\t//  uTime is the start of the update\r\n\t//  rTime is the start of the render\r\n\t \r\n\t//  flextime means update will use real time difference between two frames (could 17ms but also 20ms etc.)\r\n\t//  if flextime = false then each frame is considered to have the same fixed length, eg 16.666 ms\r\n\t \r\n\t//  The timefactor is how much one framesecond is in real time - eg timefactor = 0.1 slows down the action by 10\r\n\t \r\n    constructor(fixedLength = 0.0, timeFactor = 1.0, reportCount = 600) {\r\n\r\n\t\t//if a fixed frame time is given (in seconds)\r\n\t\tthis.flexTime = fixedLength > 0.0 ? false : true\r\n\r\n\t\t// save the fixed time\r\n\t\tthis.fixedLength = fixedLength\r\n\r\n\t\t// the time factor\r\n\t\tthis.timeFactor = timeFactor\r\n\r\n\t\t// the integral, update and render time\r\n\t\tthis.fTime  = this.uTime  = this.rTime = 0.0\r\n\t\t\r\n\t\t// the time of one loop\r\n\t\tthis.fDelta = this.uDelta = this.rDelta = 0.0\r\n\t\t\r\n\t\t// the sum \r\n\t\tthis.fCumul = this.uCumul = this.rCumul = 0.0\r\n\t\t\r\n\t\t// the nr of times render/update were done\r\n        this.fCount = this.uCount = this.rCount = 0\r\n\r\n        // report frame count\r\n        this.reportCount = reportCount\r\n    }\r\n    \r\nreset() {\r\n\t// set the counts to zero\r\n\tthis.fCount = this.uCount = this.rCount = 0\r\n\t\r\n\t// reset the cumulative time\r\n\tthis.fCumul = this.uCumul = this.rCumul = 0\r\n\r\n\t// set the starting time\r\n\tthis.fTime = window.performance.now()\r\n}\r\n\r\nframeStart() {\r\n\t// get the time\r\n\tlet now = window.performance.now()\r\n\r\n\t// Get the duration of the previous loop\r\n\tthis.fCumul += (this.fDelta = now - this.fTime)\r\n\r\n\t// save the start time of the integral loop / also the start time of the update loop\r\n\tthis.fTime = now\r\n\r\n\t// counter\r\n\tthis.fCount++\r\n\r\n\t// the time lapsed since the last update - used by update\r\n\tif (this.flexTime) \r\n\t\treturn this.fDelta * this.timeFactor\r\n\telse \r\n\t\treturn this.fixedLength * this.timeFactor\r\n}\r\n\r\nbeforeUpdate() {\r\n\t// get the update start time\r\n\tthis.uTime = window.performance.now()\r\n}\r\n\r\nafterUpdate(){\r\n\t// get the duration of the update loop\r\n\tthis.uCumul += (this.uDelta = window.performance.now() - this.uTime)\r\n\r\n\t// counter\r\n\tthis.uCount++\r\n}\r\n\r\nbeforeRender() {\r\n\t// get the render start time\r\n\tthis.rTime =  window.performance.now()\r\n}\r\n\r\nafterRender(){\r\n\t// get the duraion of the render loop\r\n\tthis.rCumul += (this.rDelta = window.performance.now() - this.rTime)\r\n\r\n\t// counter\r\n    this.rCount++\r\n\r\n\t// report if required\r\n\tif (this.fCount > this.reportCount) this.reportTiming()\r\n}\r\n\r\nreportTiming() {\r\n\r\n\t// calculate the mean values\r\n\tlet f = this.fCount > 0 ? this.fCumul/this.fCount : 0.001\r\n\tlet u = this.uCount > 0 ? this.uCumul/this.uCount : 0.0\r\n\tlet r = this.rCount > 0 ? this.rCumul/this.rCount : 0.0\r\n\r\n    // report the timings\r\n    console.log(`[TIMING] ${(1000/f).toFixed(0)} fps - frame ${f.toFixed(3)} update ${u.toFixed(3)} render ${r.toFixed(3)}`)\r\n\r\n    // set the counts and timings to zero\r\n    this.fCumul = this.uCumul = this.rCumul = 0.0\r\n    this.fCount = this.uCount = this.rCount = 0\r\n}\r\n\r\n} // end of timer class"],"names":["factor","SI.factor","THREE.Box3","THREE.Vector3","THREE.CubeGeometry","THREE.MeshLambertMaterial","THREE.Mesh","THREE.Color","boxFreeClr","boxHitClr","THREE.Matrix4","THREE.InstancedMesh","THREE.Group","THREE.Box3Helper","THREE.SphereGeometry","THREE.PerspectiveCamera","THREE.Scene","THREE.AmbientLight","THREE.PointLight","THREE.WebGLRenderer","THREE.AxesHelper"],"mappings":"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"}